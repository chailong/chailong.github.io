<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MAC开发工具大杂烩]]></title>
    <url>%2F2017%2F06%2F24%2FtoolIDE%2F</url>
    <content type="text"><![CDATA[开发必备部分软件安装配置教程 文件打开提示放入垃圾桶打开终端键入：sudo spctl --master-disable 输入密码即可本人命令放在 ~/bin 中 在 .zshrc 中 引入 export PATH=&#39;/Users/baby/bin&#39;:$PATH brew：安装：安装前需要下载Xcode官网自行安装：https://brew.sh 插件 123456brew install tig /*高亮美化*/brew install ccat /*美化cat命令*/alias cat=ccat /*替换系统cat命令*/ brew install tree /*树形目录*/ 切换PHP版本一、使用brew安装php多版本方法 12brew install php56brew install php70 二、安装切换工具 12brew install php-versionsource $(brew --prefix php-version)/php-version.sh 三、查看当前安装的所有版本 1php-version 四、切换版本 1php-version 5.6.5 1234brew listbrew services start homebrew/php/php71brew services restart php71brew unlink php71 Iterm下载&amp;安装：Itrem2下载地址:http://www.iterm2.com/downloads.html下载完成后直接拖到应用程序中 设置选项：去除 12cd ~touch .hushlogin 效果如下： 是不是干净很清爽 自动提示：zsh-autosuggestions下载&amp;安装依然是在github中：zsh-autosuggestions手动安装： 1git clone git://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions 打开 ~/.zshrc 文件 在做后一行换行添加 1source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh 退出iterm2 重新打开即可 1:com+q 直接退出 2: cond+end 在当前窗口全屏 快捷键：在任何地方呼出iterm2 . 这里设施的是英文状态下的～ 数字数字1傍边那个 材料：Oh-My-zsh:Oh-My-zsh || github上搜索使用via curl下载输入密码即可配置文件存在于 ~/.zshrc 打开它 大概第10行 ZSH_THEME=&quot;robbyrussell&quot; 我这里是 ZSH_THEME=&quot;cloud&quot; 打开 https://draculatheme.com 找到iterm2 进行下载引入选择刚刚下载的主题配置： 字体设置： 最终系效果图- 加在缓慢：1sudo rm -rf /private/var/log/asl/*.asl 清理了终端 log 就好了 干净无用 shell 语法高亮先上图 2333： 炫不炫 绿色代表存在这个命令 一眼就看出来了，如果打错了，它就是红色的 下载方式有很多，请自行安装，本人使用的手动安装 走你–&gt;插件git地址: zsh-syntax-highlighting 安装起来非常简单，clone到$ZSH_CUSTOM/plugins目录，然后在.zshrc文件正配置一下即可。 Sublime下载&amp;安装：打开sublime text 菜单栏找到 Tools -&gt; install Packge… 稍等片刻即好，编辑器左下角安装状态 主题：command+shit+p –&gt; install Package –&gt; Material Theme;地址：https://github.com/equinusocio/material-theme 配置：command + ,1234567891011121314&#123; &quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme.tmTheme&quot;, &quot;font_face&quot;: &quot;Fira Code&quot;, &quot;font_size&quot;: 14, &quot;ignored_packages&quot;: [ &quot;Vintage&quot; ], &quot;line_padding_bottom&quot;: 2, &quot;line_padding_top&quot;: 2, &quot;open_files_in_new_window&quot;: false, &quot;theme&quot;: &quot;Material-Theme.sublime-theme&quot;, &quot;update_check&quot;: false&#125; 对应：配色、字体、字号、【 】、行与行上间距、行与行下间距、禁止打开文件新建窗口、启动时创建窗口、主题、关闭自动更新提示字体：链接: https://pan.baidu.com/s/1nuCW4Lb 密码: mxvv 通过命令行启动官网地址：https://www.sublimetext.com/docs/3/osx_command_line.html1234567mkdir ~/binln -s &apos;/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl&apos; ~/bin/sublcd ~/binvi .bashrcexport PATH=&quot;/Users/baby/bin:$PATH&quot;source .bashrc 效果图 编码问题针对subl3 1、按Control + ~打开命令行,然后输入下面这一行代码 代码报错点我 复制 1import urllib.request,os; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &apos;wb&apos;).write(urllib.request.urlopen( &apos;http://sublime.wbond.net/&apos; + pf.replace(&apos; &apos;,&apos;%20&apos;)).read()) 执行之后，必须重启Subl3，才能继续 2、安装ConvertToUTF8按Command + Shift + P打开万能搜索框然后输入install package回车，这时候会加载所有的packges列表。看到列表之后再输入ConvertToUTF8回车，就会下载安装这个包。装好之后会看到个包的说明文件， 3.重复2步骤 看到列表之后输入Codecs33回车。 原因: 由于 Sublime Text 3 内嵌的 Python 限制，ConvertToUTF8 可能无法正常工作,所以你懂的 Phpstrome主题安装：cmd+shift + a 搜索 plugins -&gt;点击 brow reposit… 搜索 Material Theme UI 选中 然后install ，安装完毕重启。 生效cmd+,Editor–&gt;Color &amp; Fonts 选择主题生效 点击右下角完成 comd+1 左侧 面包屑：tabs placement : 讨厌的波浪线command shift a 搜，warning 去设置一下，或者是 typo Xdebug-phpstome1.首先下载Debug 2.配置php.ini 12345678[xdebug]xdebug.remote_autostart=1xdebug.default_enable=1xdebug.remote_port=9001xdebug.remote_host=127.0.0.1xdebug.remote_connect_back=1xdebug.remote_enable=1xdebug.idekey=PHPSTORM 3.重启下php-fpm 4.配置PHPstorm * phpstorm -&gt; preferences 打开设置页面： * 然后，再选择 Languages -&gt; php -&gt; Debug 下，将Xdebug 下的Debug port 改成9001，和php.ini中设置的一致 //OK。xdebug端口配置好了 debug也只是针对某一个页面在做的。我们以index.php页面为例，先打开index.php，菜单栏点击 run –&gt;Edit Configurations 打开设置页面： 设置完成control+d 运行Cli interpreter 错误 comd+shift+a 输入 Cli interpreter ，enter 参考：http://blog.csdn.net/think2me/article/details/45344489 其他export = ‘’:$PATHsource ./bashrc .bash_profilealias filename =’’ Gitgit config –global user.name ‘username’git config –global user.emali ‘You-Emali’ ssh-keygen -t rsa -C ‘You-Emali’ id_rsa 私钥id_rsa.pub 弓腰known_hosts 记录authorized_keys 和做人弓腰 优化git使用 git add . 、 git commit -m 很繁琐索性优化下首先在 ~/bin/ touch 一个 .alias 文件 写入： 1234567891011alias gaa=&quot;git add .&quot;alias gc=&quot;git commit -m &quot;alias gp=&quot;git push&quot;alias gs=&quot;git status&quot;#alias gl=&quot;git log --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;#alias gll=&quot;git log --graph --abbrev-commit --decorate --all --format=format:&apos;%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)&apos;&quot; 编辑 ~/.zshrc 最后加上 source ~/bin/.alias 即可。 代码规范插件phpcode安装&amp;更新官网http://cs.sensiolabs.org需要使用 PHP 5.3.6 以上的版本 curl 下载： 1curl -L http://cs.sensiolabs.org/download/php-cs-fixer-v2.phar -o php-cs-fixer wget 下载： 12345wget http://cs.sensiolabs.org/download/php-cs-fixer-v2.phar -O php-cs-fixerorwget https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v2.4.0/php-cs-fixer.phar -O php-cs-fixer 下载完成后给可执行的权限，然后移动到 bin 目录下面即可： 12sudo chmod a+x php-cs-fixersudo mv php-cs-fixer /usr/local/bin/php-cs-fixer 用法用法也很简单，最基本的命令参数就是 fix，直接执行时会尽可能多的根据默认标准格式化代码 1234# 格式化目录 如果是当前目录的话可以省略目录php-cs-fixer fix /path/to/dir# 格式化文件php-cs-fixer.phar fix /path/to/file 课外阅读优酷免费去广告打开 Chrome 的开发者工具，在 console 面板粘贴以下代码然后执行： 1window.sessionStorage.setItem(&quot;P_l_h5&quot;, true); 然后刷新，或者你使用其他浏览器的话，也是打开开发者工具，通常快捷键就是 F12，使用上面的代码。 释放你的F5(comd+R)这是官网browsersync基于node.jsnpm install -g browser-sync 启动 BrowserSync 需要进入项目目录！！ 需要进入项目目录！！ 需要进入项目目录！！ 静态网站12// --files 路径是相对于运行该命令的项目（目录） browser-sync start --server --files &quot;css/*.css&quot; 如果您需要监听多个类型的文件，您只需要用逗号隔开。 动态网站如果您已经有其他本地服务器环境PHP或类似的，您需要使用代理模式。 BrowserSync将通过代理URL(localhost:3000)来查看您的网站。 12// 主机名可以是ip或域名 这是官网给出的本人MAC无法使用browser-sync start --proxy &quot;主机名&quot; &quot;css/*.css&quot; 在本地创建了一个PHP服务器环境，并通过绑定Browsersync.cn来访问本地服务器，使用以下命令方式，Browsersync将提供一个新的地址localhost:3000来访问Browsersync.cn，并监听其css目录下的所有css文件。 1browser-sync start --proxy &quot;Browsersync.cn&quot; &quot;css/*.css&quot; 无法使用怎么办？ 1browser-sync start --proxy &quot;主机名&quot; --files &quot;css/*.css&quot; ok 可以啦]]></content>
  </entry>
  <entry>
    <title><![CDATA[git推送到服务器自动同步到站点目录]]></title>
    <url>%2F2016%2F10%2F28%2FgitToWebPage%2F</url>
    <content type="text"><![CDATA[有这样一种需求，在本地开发，然后push到服务器上，并且自动同步到web站点目录，这样就可以直接看到网页效果了。 git推送到服务器自动同步到站点目录分几个步骤 ? 在服务器上创建裸版本库 创建web目录 本地初始化版本库 本地克隆裸版本库 设置裸版本库的钩子post-receive 本地推送 裸版本库接收到推送内容后自动检出到web目录实现同步 创建裸版本库：123[root@localhost]$ mkdir /home/workspace[root@localhost]$ cd /home/workspace[root@localhost]$ git init -bare wwwroot.git 创建web目录：1[root@localhost]$ mkdir -p /home/website/wwwroot 暂时不需要本地初始化一个版本库[root@admin.pc]$ cd e:[root@admin.pc]$ git init local.git暂时不需要 使用ssh协议从服务器上克隆裸版本库内容，这里如果没有配置公钥的话，会提示输入密码。1[root@admin.pc e:/local.git/]$ git clone ssh://root@xxx.xxx.x/home/workspace/wwwroot.git 设置钩子123456[root@localhost]$ cd /home/workspace/wwwroot.git/hooks[root@localhost]$ cat &gt; post-receive &lt;&lt;EOF&gt;#!/bin/bash&gt;git --work-tree=/home/website/wwwroot checkout -f &gt;EOF[root@localhost]$ chmod +x post-receive 在服务器裸版本库目录下有一个hooks目录，进去后添加一个post-receive的文件，将上面&gt;开头的几行代码输进去，可以用vi，我这里用的cat，保存后记得使用chmod将这个文件赋予可执行权限，成为一个shell脚本。其中 –work-tree对应站点文件目录。 第一次push可能会有一些提示，因为裸版本库还什么都没有，你可能需要 git push origin master写全命令，之后就没必要了。]]></content>
      <tags>
        <tag>git</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP 数组合并方法]]></title>
    <url>%2F2016%2F10%2F16%2FphpArrayINArr%2F</url>
    <content type="text"><![CDATA[+运算符介绍 当两个数组的键名是索引数组或关联数组可以直接 「+」，$c = $a + $b ，在 $a 后追加键名和值($b在$a中不存在的键名)。 读我快速理解特点：不覆盖，只是追加不存在的键名和对应的值。键名不重新索引无论是全部索引数字还是混合，都只是追加键名和值，如果键名相同则不进行追加，即把最先出现的值作为最终结果返回。 array_merge函数介绍array_merge() 将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。如果输入的数组中有相同的关联数组，则该键名后面的值将覆盖前一个值。然而，如果数组包含索引数组，后面的值将不会覆盖原来的值，而是附加到后面。 如果只给了一个数组并且该数组是索引数组，则键名会以连续方式重新索引。 读我快速理解特点：数字索引，不会覆盖，值合并后，键名会连续方式重新索引字符串键名，则该键名后面的值将覆盖前一个值 array_merge_recursive函数介绍array_merge_recursive() 将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。 如果输入的数组中有相同的关联数组，则这些值会被合并到一个数组中去，这将递归下去，因此如果一个值本身是一个数组，本函数将按照相应的条目把它合并为另一个数组。 然而，如果数组具有相同的数组键名，后一个值将不会覆盖原来的值，而是附加到后面。 读我快速理解特点规则跟array_merge基本相同，只是在处理相同字符键名的时候，采用递归追加。]]></content>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[排序法之最快方法]]></title>
    <url>%2F2016%2F10%2F06%2Fstort1%2F</url>
    <content type="text"><![CDATA[按照惯例我感觉我还的介绍下冒泡排序(这里介绍来子网络)。冒泡排序（Bubble Sort，台湾译为：泡沫排序或气泡排序）是一 种简单的排序算法。它重复地走访过要排序的数列，依次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 思路比较相邻的元素。如果第一个比第二个大，就交换他们两个。对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。针对所有的元素重复以上的步骤，除了最后一个。持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。 呆萌–demo：123456789101112131415161718192021$arrs = array(1,43,2,3,4,5,6); // 6+5+4+3+2+1 循环次数=(数组总数-1)的累加和function BubbleSort ($arr)&#123; $two = 0; $len = count($arr); //该层循环控制 需要冒泡的轮数 for ($i=1; $i&lt;$len; $i++) &#123; //该层循环用来控制每轮 冒出一个数 需要比较的次数 for ($k=0; $k&lt;$len-$i; $k++) &#123; $two++; if($arr[$k] &gt; $arr[$k+1]) &#123; $tmp = $arr[$k+1]; //声明一个临时变量暂时存放 $arr[$k+1] = $arr[$k]; $arr[$k] = $tmp; &#125; &#125; &#125; echo $two.&apos;==two&lt;br&gt;&apos;; return $arr;&#125;var_dump(BubbleSort($arrs)); 测试欢迎投稿下面是笔者做的一个测试的一个循环次数，如果你有比笔者更快方法请发送到 http://www.llaravel.com 进行留言]]></content>
      <tags>
        <tag>-- 排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql的左链接和右链接区别]]></title>
    <url>%2F2016%2F10%2F03%2FmysqlJOIN%2F</url>
    <content type="text"><![CDATA[很多人在学习活面试的时候会听到这样的问题：Mysql的左链接和右链接有什么区别？ 简单的理解： 左连接: 左表所有与右表满足条件的 右连接: 右表所有与左表满足条件的 例子，相信你一看就明白，不需要多说 12345678910A表(a1,b1,c1) B表(a2,b2) a1 b1 c1 a2 b2 01 数学 95 01 张三 02 语文 90 02 李四 03 英语 80 04 王五``` 左链接`select A.*,B.* from A left outer join B on(A.a1=B.a2)`结果是: a1 b1 c1 a2 b201 数学 95 01 张三02 语文 90 02 李四03 英语 80 NULL NULL1234右链接`select A.*,B.* from A right outer join B on(A.a1=B.a2)`结果是: a1 b1 c1 a2 b201 数学 95 01 张三02 语文 90 02 李四NULL NULL NULL 04 王五```]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LINUX 目录结构]]></title>
    <url>%2F2016%2F09%2F22%2FlinuxDir%2F</url>
    <content type="text"><![CDATA[LINUX 目录结构装完Linux，首先需要弄清Linux 标准目录结构/ root —?启动Linux时使用的一些核心文件。如操作系统内核、引导程序Grub等。 home —?存储普通用户的个人文件 ftp — 用户所有服务 httpd samba user1 user2 bin —?系统启动时需要的执行文件（二进制） sbin —?可执行程序的目录，但大多存放涉及系统管理的命令。只有root权限才能执行 proc — 虚拟，存在linux内核镜像；保存所有内核参数以及系统配置信息 1 — 进程编号 usr — 用户目录，存放用户级的文件 bin — 几乎所有用户所用命令，另外存在与/bin，/usr/local/bin sbin — 系统管理员命令，与用户相关，例如，大部分服务器程序 include —??存放C/C++头文件的目录 lib — 固定的程序数据 local — 本地安装软件保存位置 man — 手工生成的目录 info — 信息文档 doc — 不同包文档信息 tmp X11R6 —??该目录用于保存运行X-Window所需的所有文件。该目录中还包含用于运行GUI要的配置文件和二进制文件。 X386 — 功能同X11R6，X11 发行版5 的系统文件 boot — 引导加载器所需文件，系统所需图片保存于此 lib —?根文件系统目录下程序和核心模块的公共库 modules — 可加载模块，系统崩溃后重启所需模块 dev —?设备文件目录 etc — 配置文件 skel — home目录建立，该目录初始化 sysconfig — 网络，时间，键盘等配置目录 var file lib — 该目录下的文件在系统运行时，会改变 local — 安装在/usr/local的程序数据，变化的 lock — 文件使用特定外设或文件，为其上锁，其他文件暂时不能访问 log — 记录日志 run — 系统运行合法信息 spool —?打印机、邮件、代理服务器等假脱机目录 tmp catman — 缓存目录 mnt —?临时用于挂载文件系统的地方。一般情况下这个目录是空的，而在我们将要挂载分区时在这个目录下建立目录，再将我们将要访问的设备挂载在这个目录上，这样我们就可访问文件了。 tmp — 临时文件目录，系统启动后的临时文件存放在/var/tmp lost+found — 在文件系统修复时恢复的文件 /：根目录，一般根目录下只存放目录，不要存放文件，/etc、/bin、/dev、/lib、/sbin应该和根目录放置在一个分区中 /bin:/usr/bin:可执行二进制文件的目录，如常用的命令ls、tar、mv、cat等。 /boot：放置linux系统启动时用到的一些文件。/boot/vmlinuz为linux的内核文件，以及/boot/gurb。建议单独分区，分区大小100M即可 /dev：存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱mount /dev/cdrom /mnt。 /etc：系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有/etc/inittab、/etc/fstab、/etc/init.d、/etc/X11、/etc/sysconfig、/etc/xinetd.d修改配置文件之前记得备份。 注：/etc/X11存放与x windows有关的设置。 /home：系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下，~表示当前用户的家目录，~test表示用户test的家目录。建议单独分区，并设置较大的磁盘空间，方便用户存放数据 /lib:/usr/lib:/usr/local/lib：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助，比较重要的目录为/lib/modules。 /lost+fount：系统异常产生错误时，会将一些遗失的片段放置于此目录下，通常这个目录会自动出现在装置目录下。如加载硬盘于/disk 中，此目录下就会自动产生目录/disk/lost+found /mnt:/media：光盘默认挂载点，通常光盘挂载于/mnt/cdrom下，也不一定，可以选择任意位置进行挂载。 /opt：给主机额外安装软件所摆放的目录。如：FC4使用的Fedora 社群开发软件，如果想要自行安装新的KDE 桌面软件，可以将该软件安装在该目录下。以前的 Linux 系统中，习惯放置在 /usr/local 目录下 /proc：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的目录有/proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/*等 /root：系统管理员root的家目录，系统第一个启动的分区为/，所以最好将/root和/放置在一个分区下。 /sbin:/usr/sbin:/usr/local/sbin：放置系统管理员使用的可执行命令，如fdisk、shutdown、mount等。与/bin不同的是，这几个目录是给系统管理员root使用的命令，一般用户只能”查看”而不能设置和使用。 /tmp：一般用户或正在执行的程序临时存放文件的目录,任何人都可以访问,重要数据不可放置在此目录下 /srv：服务启动之后需要访问的数据目录，如www服务需要访问的网页数据存放在/srv/www内 /usr：应用程序存放目录，/usr/bin存放应用程序，/usr/share存放共享数据，/usr/lib存放不能直接运行的，却是许多程序运行所必需的一些函数库文件。/usr/local:存放软件升级包。/usr/share/doc:系统说明文件存放目录。/usr/share/man:?程序说明文件存放目录，使用 man ls时会查询/usr/share/man/man1/ls.1.gz的内容建议单独分区，设置较大的磁盘空间 /var：放置系统执行过程中经常变化的文件，如随时更改的日志文件/var/log，/var/log/message：所有的登录文件存放目录，/var/spool/mail：邮件存放的目录，/var/run:程序或服务启动后，其PID存放在该目录下。建议单独分区，设置较大的磁盘空间]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux LNMP服务器搭建教程]]></title>
    <url>%2F2016%2F09%2F21%2FlnmpInstall%2F</url>
    <content type="text"><![CDATA[安装NGINX下载nginx源码包1.官网下载地址：http://nginx.org/en/download.html 2.通过wget|apt-get：wget http://nginx.org/download/nginx-1.13.0.tar.gz 3.点我下载 解压安装包并安装123456789tar -xzf nginx-1.13.0.tar.gzcd nginx-1.13.0yum -y install pcre-devel openssl openssl-devel./configure - -prefix=/usr/local/nginx make &amp;&amp; make install 可以参看这篇文章：http://www.linuxidc.com/Linux/2016-03/129303.htm执行完后会得到这样表示安装成功这里提示安装路径为:/usr/local/nginx这时候访问网站是没有任何效果的因为服务还没有启动： 启动NGINX1nginx -c /usr/local/nginx/conf/nginx.conf 停止NGINX通过进程 1234查看进程 ： ps -ef | grep nginx快速停止Nginx： kill -QUIT 主进程号 或强制停止Nginx： kill -TERM 主进程号 重启NGINX如果更改了配置就要重启Nginx，要先关闭Nginx再打开？不是的，可以向Nginx 发送信号，平滑重启。平滑重启命令： 1kill -HUP 住进称号或进程号文件路径 或者使用 1/usr/nginx/sbin/nginx -s reload ##nginx只能访问主页其他页面404问题 123456789location / &#123; root D:/WWW/Lifes/public; index index.html index.htm index.php; try_files $uri $uri/ /index.php?$query_string; if (!-e $request_filename)&#123; rewrite ^/(.*) /index.php last; &#125; &#125; ———————————-华丽的分割线———————————– ⚠️注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。判断Nginx配置是否正确命令如下： 1nginx -t -c /usr/nginx/conf/nginx.conf 或者 1/usr/nginx/sbin/nginx -t 安装PHP下载php[下载php url在php官网中复制]wget url [安装编译器 依赖工具]yum install gcc gcc-c++ libxml2-devel下载PHP 选择相对于的版本PHP官网下载注意：Linux 下载失败是下载的URL被加密了需要修改下URL方法如下：1.先将文件加入下载列表2.打开下载列表找到对应PHP文件-》右击拷贝地址将它粘贴到浏览器地址栏中不要回车，你会看到类似这样的链接http://124.205.69.131/files/2088000005848DB0/cn2.php.net/distributions/php-7.0.19.tar.gz将URL中的 124.205.69.131/files/2088000005848DB0/ 删除掉，拷贝URL 即可在 「Linux」 中使用 「wget」 下载了。 [php文件夹下编译php “–enable-fpm”：nginx需要它解析php]./configure –prefix=/usr/local/php7 –enable-fpm –with-mysqli=/usr/local/mysql/bin/mysql_config 指定mysqli位置 –with-mysql=/usr/local/mysql/ 指定mysql位置 –with-config-file-path=/usr/local/php/etc/ 指定配置文件目录 [编译&amp;安装]-&gt;make &amp;&amp; make install 拷贝文件：1.进入 /usr/local/php/etc/ 目录 12345cp php-fpm.conf.default php-fpm.confcd php-fpm.dcp www.conf.default www.confcd /usr/local/php/sbin./php-fpm 全局PHP ：export PATH=$PATH:/usr/local/php7/bin 安装php启动停止重启/usr/local/php/sbin/php-fpm &amp; 扩展问题/php/bin/phpize 报错 1234567891011wget http://ftp.gnu.org/gnu/m4/m4-1.4.9.tar.gztar -zvxf m4-1.4.9.tar.gzcd m4-1.4.9/./configure &amp;&amp; make &amp;&amp; make installcd ../wget http://ftp.gnu.org/gnu/autoconf/autoconf-2.62.tar.gztar -zvxf autoconf-2.62.tar.gzcd autoconf-2.62/./configure &amp;&amp; make &amp;&amp; make install 安装步骤1.进入PHP源码包「etc」 目录下 进入相应的扩展目录 12345678910111213/usr/local/php/bin/phpize #这里为你自己的phpize路径，如果找不到，使用whereis phpize查找#执行后，发现错误 无法找到config.m4 ，config0.m4就是config.m4。直接重命名mv config0.m4 config.m4/usr/local/php/bin/phpize./configure --with-openssl --with-php-config=/usr/local/php/bin/php-configmakemake install 安装完成后，会返回一个 .so 文件（openssl.so）的目录。在此目录下把 openssl.so 文件拷贝到你在php.ini 中指定的 extension_dir 下（在php.ini文件中查找：extension_dir =），我这里的目录是/usr/local/php/lib/php/extensions编辑php.ini文件，在文件添加 1extension=openssl.so 重启Apache/Nginx即可 mysql的安装首先使用yum或apt-get下载依赖管理： 1yum -y install gcc gcc-c++ ncurses-devel cmake ⚠️注意：MySQL从5.5开始，使用cmake 进行编译设置；因此，我们还要安装cmake编译工具 装MySQL需要依赖 Boost 的C++扩展，而且只能是 1.59.0 版本Boost 下载地址： http://www.boost.org/users/history ；选择1.59.0版本下载，在编译是填写相应参数，指定Boost源码位置即可,我这里放装到了 /usr/local/ 下； 1234567wget https://jaist.dl.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.gzboost_1_59_0.tar.gztar xzvf boost_1_59_0.tar.gz # 解压扩展mv boost_1_59_0 /usr/local/boost # 将扩展源码剪切到/usr/local下 下载mysql前往mysql官网下载linux通用版本源码包。或 点我下载mysql-5.7.18源码版本 安装mysql123456789wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.18.tar.gztar xzvf mysql-5.7.18.tar.gzcd mysql-5.7.18 # 切换目录到刚解压的文件夹中cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DMYSQL_UNIX_ADDR=/tmp/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DMYSQL_TCP_PORT=3306 -DWITH_BOOST=/usr/local/boostmake &amp;&amp; make install. #此过程很漫长，请耐心等待 ⚠️注意：这里的 -DWITH_BOOST 要改成你的路径否则会出错 我这里路径是 /usr/local/boost cmake 参数解释：-DCMAKE_INSTALL_PREFIX： 指定安装路径-DMYSQL_DATADIR ： 指定数据存放路径-DMYSQL_UNIX_ADDR ：指定套间字路径-DDEFAULT_CHARSET ： 设置字符集-DDEFAULT_COLLATION ： 设置字符校验集-DWITH_BOOST ： 指定Boost扩展源码路径-DMYSQL_USER=mysql ： 指定mysql运行用户-DMYSQL_TCP_PORT=3306 ：指定mysql端口-DWITH_INNOBASE_STORAGE_ENGINE=1 ： 安装innodb存储引擎-DWITH_MEMORY_STORAGE_ENGINE=1 ： 安装memory存储引擎-DWITH_READLINE=1 ： 支持readline库-DENABLED_LOCAL_INFILE=1 ： 启用加载本地数据 mysql安装成功后查看/etc/my.cnf 文件是否存在，如果没有的话执行以下命令有的话则跳过。 1cp /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf #复制配置文件 修改配置文件 /etc/my.cnf 修改内容如下 12345basedir = /usr/local/mysql/ # 这里是mysql的安装路径datadir = /usr/local/mysql/data # 这里是 mysql的数据存放路径socket = /tmp/mysql.sock # 这个我忘了 添加mysql用户和创建数据存放目录，并修改权限 1234567891011groupadd mysqluseradd -r -g mysql -s /bin/false mysql # 创建不可登录用户mkdir -p /usr/local/mysql/datacd /usr/local/mysql #切换至安装目录bin/mysqld --defaults-file=/etc/my.cnf --initialize --user=mysql # 初始化数据库chown -R mysql:mysql /usr/local/mysql # 修改权限 初始化数据库命令参数解释：–defaults-file ： 制定MySQL配置文件路径–initialize ： 初始化随机密码，注意，初始化的密码是一个过期密码，登录后需要修改密码–user： 指定账户上一个命令执行完之后，会在命令提示符的最后给出随机密码，一定记住 将此密码记录下来 到这里mysql 安装完毕接下来让我们启动mysql吧！ 1234567cd /usr/local/mysql #切换到mysql安装目录support-files/mysql.server start # 启动mysql 服务器bin/mysql -u root -p Enter password： # 输入刚刚的随机密码链接数据库 进入数据库必须修改密码否侧无法使用 1ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;NewPassWord&apos;; ⚠️注意：这里修改密码必须且只能使用「ALTER」 命令修改 启动123456789cd /usr/local/mysql/support-filescp mysql.server /etc/init.d/mysqld #添加mysql启动命令cd /usr/local/mysql/binvim /root/.bash_profile #将mysql添加到系统的环境变量里PATH=$PATH:$HOME/bin:/usr/local/lnmp/mysql/binsource /root/.bash_profile #刷新环境变量文件echo $PATH #查看mysql添加到环境变量which mysql #测试/usr/local/lnmp/mysql/bin/mysql 停止重启NGINX全局设置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182vi /etc/init.d/nginx (输入下面的代码)#!/bin/bash# nginx Startup script for the Nginx HTTP Server# it is v.0.0.2 version.# chkconfig: - 85 15# description: Nginx is a high-performance web and proxy server.# It has a lot of features, but it&apos;s not for everyone.# processname: nginx# pidfile: /var/run/nginx.pid# config: /usr/local/nginx/conf/nginx.conf#nginx程序路径nginxd=/usr/local/nginx/sbin/nginx#nginx配置文件路径nginx_config=/usr/local/nginx/conf/nginx.confnginx pid文件的路径，可以在nginx的配置文件中找到nginx_pid=/var/run/nginx.pidRETVAL=0prog=&quot;nginx&quot;# Source function library.. /etc/rc.d/init.d/functions# Source networking configuration.. /etc/sysconfig/network# Check that networking is up.[ $&#123;NETWORKING&#125; = &quot;no&quot; ] &amp;&amp; exit 0[ -x $nginxd ] || exit 0# Start nginx daemons functions.start() &#123;if [ -e $nginx_pid ];then echo &quot;nginx already running....&quot; exit 1fi echo -n $&quot;Starting $prog: &quot; daemon $nginxd -c $&#123;nginx_config&#125; RETVAL=$? echo [ $RETVAL = 0 ] &amp;&amp; touch /var/lock/subsys/nginx return $RETVAL&#125;# Stop nginx daemons functions.stop() &#123; echo -n $&quot;Stopping $prog: &quot; killproc $nginxd RETVAL=$? echo [ $RETVAL = 0 ] &amp;&amp; rm -f /var/lock/subsys/nginx /var/run/nginx.pid&#125;# reload nginx service functions.reload() &#123; echo -n $&quot;Reloading $prog: &quot; #kill -HUP `cat $&#123;nginx_pid&#125;` killproc $nginxd -HUP RETVAL=$? echo&#125;# See how we were called.case &quot;$1&quot; instart) start ;;stop) stop ;;reload) reload ;;restart) stop start ;;status) status $prog RETVAL=$? ;;*) echo $&quot;Usage: $prog &#123;start|stop|restart|reload|status|help&#125;&quot; exit 1esacexit $RETVAL 同样的修改了nginx的配置文件nginx.conf，也可以使用上面的命令重新加载新的配置文件并运行，可以将此命令加入到rc.local文件中，这样开机的时候nginx就默认启动了 在 rc.local 加入一行如下代码： 123vi /etc/rc.local /etc/init.d/nginx start 保存并退出，下次重启会生效。 将nginx添加为系统服务123chkconfig --add nginxchkconfig nginx on 对于其他服务也同样适用，比如Mysql,php-fpm等等 Laravel 安装下载composer 官网下载地址 123php -r &quot;copy(&apos;https://getcomposer.org/installer&apos;, &apos;composer-setup.php&apos;);&quot;php -r &quot;if (hash_file(&apos;SHA384&apos;, &apos;composer-setup.php&apos;) === &apos;669656bab3166a7aff8a7506b8cb2d1c292f042046c5a994c43155c0be6190fa0355160742ab2e1c88d40d5be660b410&apos;) &#123; echo &apos;Installer verified&apos;; &#125; else &#123; echo &apos;Installer corrupt&apos;; unlink(&apos;composer-setup.php&apos;); &#125; echo PHP_EOL;&quot; 123php composer-setup.phpphp -r &quot;unlink(&apos;composer-setup.php&apos;);&quot; 上述命令执行完毕后当前目录会有一个名为 「composer.par」 文件 给文件可执行权限并剪切到 /usr/local/bin/ 目录下重命名为 「composer」 12chmod +x composer.premv composer.pre /usr/local/bin/composer 现在可以全局运行composr 命令 ，如果不行则运行一下命令； 123vim /etc/profileexport PATH=&quot;$PATH:/usr/local/bin/&quot; Esc :wq 保存 laravel安装 首先，使用 Composer 下载 Laravel 安装包： 1composer global require &quot;laravel/installer&quot; 注意：下载速度慢可以使用下面镜像地址 打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：composer config -g repo.packagist composer https://packagist.phpcomposer.com 将 ~/.composer/vendor/bin 路径加到 PATH,只有这样系统才能找到 laravel 的执行文件,安装完成，就可以使用 laravel new 命令在指定目录创建一个新的 Laravel 项目. 1234567vim ~/.bashrcalias laravel=&apos;~/.composer/vendor/bin/laravel&apos; source ~/.bashrcchmod -R +x /root/.composer/vendor/laravel/ #增加Laravel执行权限 开始你的Laravel的旅程吧～。 执行遇到/usr/bin/env: php: No such file or directory 怎么办？主要是php安装文件不在 /usr/local/bin 。安装在 /usr/local/php中 找到php的可执行文件，/usr/local/php5513/bin/php ln -s /usr/local/php5513/bin/php /usr/local/bin/php 把可执行文件连接过去就可以了。 ⚠️注意：下载laravel项目访问时候会出现空白页面是因为「bootstrap」 和 「storage」需要读写权限 123chmod -R 777 bootstrap/chmod -R 777 storage/]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>LNMP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[laravel最优雅的模糊查询]]></title>
    <url>%2F2016%2F09%2F18%2FlaravelMoHuSelect%2F</url>
    <content type="text"><![CDATA[Create a new post123456789101112131415161718192021222324252627public function index(Request $request)&#123;$page = 0;$limit = 10;$where[] = ['id','!=',0]; if ($request-&gt;page) &#123; $page = ($request-&gt;page-1)*10;&#125; if ($request-&gt;disease) &#123; $where[] = ['disease_lists','like',"%,$request-&gt;disease%"];&#125; if ($request-&gt;hosname) &#123; $where[] = ['name','like',"%$request-&gt;hosname%"]; $limit = 15;&#125; $hos_topten = DB::connection('ezhuanzhen')-&gt;table('cb_hos') -&gt;where($where) -&gt;orderBy('browse_num','desc') -&gt;skip($page) -&gt;take($limit) -&gt;select('id','name','level','address','browse_num as hot','tel_list','disease_list') -&gt;get();&#125; 进入hexo博客项目的themes/next目录用文本编辑器打开_config.yml文件搜索”auto_excerpt”,把enable改为对应的false改为true，然后hexo d -g，再进主页，问题就解决了！]]></content>
      <tags>
        <tag>laravel</tag>
        <tag>select</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LINUX中常用操作命令]]></title>
    <url>%2F2016%2F09%2F18%2FlinuxComdLine%2F</url>
    <content type="text"><![CDATA[LINUX中常用操作命令 Linux简介及Ubuntu安装Linux，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian安装VMware或VirtualBox虚拟机。具体安装步骤，找百度。再安装Ubuntu。具体安装步骤，找百度。安装完后，可以看到Linux系统的目录结构，见链接http://www.cnblogs.com/laov/p/3409875.html #常用指令 ls 显示文件或目录 -l 列出文件详细信息l(list) -a 列出当前目录下所有文件及目录，包括隐藏的a(all) mkdir 创建目录 -p 创建目录，若无父目录，则创建p(parent) cd 切换目录 touch 创建空文件 echo 创建带有内容的文件。 cat 查看文件内容 cp 拷贝 mv 移动或重命名 rm 删除文件 -r 递归删除，可删除子目录及文件 -f 强制删除 find 在文件系统中搜索某文件 wc 统计文本中行数、字数、字符数 grep 在文本文件中查找某个字符串 rmdir 删除空目录 tree 树形结构显示目录，需要安装tree包 pwd 显示当前目录 ln 创建链接文件 more、less 分页显示文本文件内容 head、tail 显示文件头、尾内容 ctrl+alt+F1 命令行全屏模式 系统管理命令stat 显示指定文件的详细信息，比ls更详细 who 显示在线登陆用户 whoami 显示当前操作用户 hostname 显示主机名 uname 显示系统信息 top 动态显示当前耗费资源最多进程信息 ps 显示瞬间进程状态 ps -aux du 查看目录大小 du -h /home带有单位显示目录信息 df 查看磁盘大小 df -h 带有单位显示磁盘信息 ifconfig 查看网络情况 ping 测试网络连通 netstat 显示网络状态信息 man 命令不会用了，找男人 如：man ls clear 清屏 alias 对命令重命名 如：alias showmeit=”ps -aux” ，另外解除使用unaliax showmeit kill 杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程。 打包压缩相关命令gzip： bzip2： 12345678910111213tar: 打包压缩 -c 归档文件 -x 压缩文件 -z gzip压缩文件 -j bzip2压缩文件 -v 显示压缩或解压缩过程 v(view) -f 使用档名 例： tar -cvf /home/abc.tar /home/abc 只打包，不压缩 tar -zcvf /home/abc.tar.gz /home/abc 打包，并用gzip压缩 tar -jcvf /home/abc.tar.bz2 /home/abc 打包，并用bzip2压缩 当然，如果想解压缩，就直接替换上面的命令 tar -cvf / tar -zcvf / tar -jcvf 中的“c” 换成“x” 就可以了。 关机/重启机器shutdown 123456789-r 关机重启-h 关机不重启now 立刻关机halt 关机reboot 重启 Linux管道将一个命令的标准输出作为另一个命令的标准输入。也就是把几个命令组合起来使用，后一个命令除以前一个命令的结果。 例：grep -r &quot;close&quot; /home/* | more 在home目录下所有文件中查找，包括close的文件，并分页输出。 Linux软件包管理dpkg (Debian Package)管理工具，软件包名以.deb后缀。这种方法适合系统不能联网的情况下。 比如安装tree命令的安装包，先将tree.deb传到Linux系统中。再使用如下命令安装。 sudo dpkg -i tree_1.5.3-1_i386.deb 安装软件 sudo dpkg -r tree 卸载软件 注：将tree.deb传到Linux系统中，有多种方式。VMwareTool，使用挂载方式；使用winSCP工具等； APT（Advanced Packaging Tool）高级软件工具。这种方法适合系统能够连接互联网的情况。 依然以tree为例 sudo apt-get install tree 安装tree sudo apt-get remove tree 卸载tree sudo apt-get update 更新软件 sudo apt-get upgrade 将.rpm文件转为.deb文件 .rpm为RedHat使用的软件格式。在Ubuntu下不能直接使用，所以需要转换一下。 sudo alien abc.rpm vim使用vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。 命令模式下： 123456789101112131415:q 退出:q! 强制退出:wq 保存并退出:set number 显示行号:set nonumber 隐藏行号/apache 在文档中查找apache 按n跳到下一个，shift+n上一个yyp 复制光标所在行，并粘贴h (左移一个字符←)、j(下一行↓)、k(上一行↑)、l(右移一个字符→) #用户及用户组管理/etc/passwd 存储用户账号 /etc/group 存储组账号 /etc/shadow 存储用户账号的密码 /etc/gshadow 存储用户组账号的密码 useradd 用户名 userdel 用户名 adduser 用户名 groupadd 组名 groupdel 组名 passwd root 给root设置密码 su root su - root /etc/profile 系统环境变量 bash_profile 用户环境变量 .bashrc 用户环境变量 su user 切换用户，加载配置文件.bashrc su - user 切换用户，加载配置文件/etc/profile ，加载bash_profile 更改文件的用户及用户组sudo chown [-R] owner[:group] {File|Directory} 例如：还以jdk-7u21-linux-i586.tar.gz为例。属于用户 「hadoop」 ，组 「hadoop」 要想切换此文件所属的用户及组。可以使用命令。 sudo chown root:root jdk-7u21-linux-i586.tar.gz 文件权限管理三种基本权限 R 读 数值表示为4 W 写 数值表示为2 X 可执行 数值表示为1 如图所示，jdk-7u21-linux-i586.tar.gz文件的权限为-rw-rw-r-- -rw-rw-r--一共十个字符，分成四段。 第一个字符『-』表示普通文件；这个位置还可能会出现“l”链接；“d”表示目录 第二三四个字符『rw-』表示当前所属用户的权限。 所以用数值表示为4+2=6 第五六七个字符『rw-』表示当前所属组的权限。 所以用数值表示为4+2=6 第八九十个字符『r–』表示其他用户权限。 所以用数值表示为2 所以操作此文件的权限用数值表示为662 更改权限sudo chmod 「u所属用户 g所属组 o其他用户 a所有用户] [+增加权限 -减少权限] [r w x」 目录名 例如：有一个文件filename，权限为 「-rw-r—-x」 ,将权限值改为 -rwxrw-r-x ，用数值表示为765 sudo chmod u+x g+w o+r filename 上面的例子可以用数值表示 sudo chmod 765 filename]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>常用操作命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS Sierra 如何打开任何来源]]></title>
    <url>%2F2016%2F09%2F14%2FMacOpenError%2F</url>
    <content type="text"><![CDATA[一定有很多小朋友遇到过这样的问题，升级到了macOS Sierra，随之而来的是第三方应用都无法打开了，提示无法打开或者扔进废纸篓。浪费了1个小时却得到下图一样的回报，绝望不绝望 意不意外 惊不惊喜 刺不刺激 感觉整个人都崩溃了，下面我会告诉你如何解决。 首先我们来了解下大家都知道，macOS Sierra之前的系统也是需要手动去打开应用程序-系统偏好设置-安全性和隐私-通用里勾选任何来源，这样操作之后才能打开第三方应用。而到了macOS Sierra同样如此，但是默认是不显示的。「电脑都不让玩了，还怎么活」 不想看废话？点我啊1.打开终端工具 (往下看教你如何打开终端)2.输入命令 sudo spctl --master-disable 回车执行3.输入用户名密码4.打开设置-隐私 查看由刚开始的这样 变成这样 5.完毕 ⚠️ 如果将「隐私权限」改回系统默认，需要重新执行上述命令 终端的打开姿势 点击桌面空白处-选择菜单栏「前往」- 实用工具 找到终端双击打开 点击桌面空白处 使用快捷键:command+shift+u 找到终端双击打开 使用command+空格 输入 Terminal 或 终端 回车打开 打开应用程序-实用工具-终端 双击打开]]></content>
      <tags>
        <tag>Mac</tag>
        <tag>App_Errpr</tag>
        <tag>软件打不开</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Laravel 从零开始]]></title>
    <url>%2F2016%2F09%2F09%2FlaravelStart%2F</url>
    <content type="text"><![CDATA[Laravel 安装1.下载composer 官网2.mv composer.pr /usr/local/bin/composr3.laravel new blog 或 composer create-project --prefer-dist laravel/laracel Laravel54.使用 php artisna serve 来启动 laravel 框架 Laravel 基本工作流程routes 路由文件：你可以想象成为专门处理http请求的，比如get、post等。 以前访问页面都是某个文件夹下面某个PHP文件 访问地址如下： 123images/index.php或www.xxx.com/images/index.php 打开 routes/web.php 你会发现里面有三行代码， 123Route::get(&apos;/&apos;, function () &#123; return view(&apos;welcome&apos;);&#125;); 在Laravel中 你会神奇的发现这是一条get 请求 「／」 目录 下一个匿名方法。你可以将匿名函数内容改为 return &#39;Hello world&#39; 保存 ，访问 http://127.0.0.1:8000 你会发现每次访问都要写一个匿名函数，我们通常会采取 Controller控制器 来访问。下面我们来创建 Controller控制器 ，首先要使用 终端 进入你的项目根目录。 123php artisan make:controller NameController # 创建一个不带方法的路由php artisan make:controller NameController --resource #创建一个带方法的路由 ⚠️ 控制器的默认目录放在 app/Http/Controller 下 打开刚刚创建的 控制器 在里面如下方法 1234public function index()&#123; return view(&apos;welcome&apos;);&#125; 我们修改 routes/web.php 12345Route::get(&apos;/&apos;,&apos;NameController@index&apos;);//$router-&gt;get( &apos;/&apos; , &apos;NameController@index&apos; );//Route::resource(&apos;／&apos;, &apos;PhotoController&apos;); #我们在后面会讲解到，不要在这里纠结这是什么意思 ⚠️ 上面2行代码是等效的。 打开浏览器访问 http://127.0.0.1:80 你会惊奇的发现页面没有变化 Laravel向视图传递变量这里 「name」是发送给视图的变量，「$name」是变量值 单个变量1return vier(&apos;about.about&apos;)-&gt;with(&apos;name&apos;,$name); 多个变量123456789101112#方法1:return vier(&apos;about.about&apos;)-&gt;with([ &apos;first&apos;=&gt; &apos;one&apos;, &apos;last&apos;=&gt; &apos;two&apos;]); #方法2:$array=[];$array[&apos;farst&apos;]= &apos;one&apos;;$array[&apos;lost&apos;]= &apos;two&apos;;return vier(&apos;about.about&apos;,$array); 多个或单个变量123$first= &apos;one&apos;;$lost= &apos;two&apos;;return view(&apos;about.about&apos;,compact(&apos;first&apos;,&apos;lost&apos;)); # 个人倾向 在模板中使用变量 传统写法： 1&lt;?php $name ?&gt; laravel写法 123&#123;&#123; $name &#125;&#125; #会转义变量&#123;!! $name !!&#125; #不会转义变量 注意xss攻击 Laravel Blade 模板简介比如我们需要新建一个页面，考虑页面CSS一至性，每次都要 cp ？ ❌其实网们可以这样做 在 views/目录下新建 app.blade.php 12345678910111213&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style/css/style.css&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style/css/external.min.css&quot;/&gt;&lt;/head&gt;&lt;body&gt;@yield(&apos;content&apos;) #重点在这里 设置一块content缓冲区&lt;/body&gt;&lt;/html&gt; 其他html页面可以删除body以上代码12345@extends(&apos;app&apos;) #继承刚才新建的app.blade.php@section(&apos;content&apos;) #创建一块content缓冲区 #body正文@stop #一个section对应1个stop ⚠️ 如果一个页面西药特定文件怎么办 没错就是在创建一块缓冲区 这个你学会了，在来的新技能吧！ 在模版中使用条件 循环条件判断12345@if(true) &lt;h1&gt; true &lt;/h1&gt;@else flast@endif 循环123@foreach($array as $key) &#123;&#123; $key &#125;&#125;@endforeach Laravel环境配置.envenv(‘.env名称’,’默认值’) 美化phpstormhttps://www.laravist.com/series/phpstorm-the-best-php-ide-you-ever-met/episodes/2 mac终端美化：安装「oh my zsh」可以自动安装也可以手动安装推荐手动安装 手动安装Github地址12git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zshcp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc 自动安装1wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh 替换bash为zsh1chsh -s /bin/zsh 自动提示插件安装下载插件1234git clone git://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions#将下命令添加到你的 .zshrc:source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh git问题大全执行git push错误时的解决方法默认情况下在执行 git push 时，系统会提示error而无法成功推送。这是由于git默认拒绝了push操作，需要进行设置，修改远程仓库目录中的 .git/config 文件. 解决方法：在后面添加如下代码： 1234567891011121314[receive] denyCurrentBranch = ignore``` ### 执行git push后，服务器端无法查看到推送内容的原因及解决方法在初始化远程仓库时最好使用：`git --bare init`，而不要使用：`git init`如果使用了`git init` 初始化，则远程仓库的目录下也包含 work tree。当本地仓库向远程仓库push时，如果远程仓库正在push的分支上（如果当时不在push的分支，就没有问题）, 那么push后的结果不会反应在work tree上，也即在远程仓库的目录下对应的文件还是之前的内容。**解决方法：**远程端必须运行命令：`git reset --hard` 才能看到 push 后的内容。### 解决因git源代码库路径发生变化，导致本地代码库无法同步的问题如果执行git clone之后，源代码库的路径发生变化，导致无法与源代码保持一致，可以修改本地代码库的.git/config文件以更新源代码路径，例如：vi .git/config内容如下： [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true[remote “origin”] fetch = +refs/heads/:refs/remotes/origin/ url = /home/android/gitTestSource[branch “master”] remote = origin merge = refs/heads/master123456**解决方法：**如果现在/home/android/gitTestSource目录的文件被移动到了/home/android/project/gitTestSource目录，则可将其中的url = /home/android/gitTestSource改为：url = /home/android/project/gitTestSource。### git Unable to create temporary file1）出现 `Unable to create temporary file: Permission denied`在Windows上使用TortoiseGit执行Push时出现以下错误 git.exe push –force –progress “origin” master:masterCounting objects: 189, done.Compressing objects: 100% (187/187)Writing objects: 7% (14/189)fatal: Unable to create temporary file: Permission deniedfatal: sha1 file ‘‘ write error: Invalid argumenterror: failed to push some refs to ‘git@110.73.4.46:channelv.git’123 `git did not exit cleanly (exit code 1)`原来是服务器上是用root账户建立的库目录，导致git账户无权写入，方法就是修改文件夹的所属用户和所属用户组 chown -R git chgrp -R git 123452）出现 `failed to push some refs to &apos;git@110.731.41.46:channelv.git&apos;`在Windows上使用TortoiseGit执行Push时出现以下错误 git.exe push –progress “origin” master:masterCounting objects: 189, done.Compressing objects: 100% (158/158)Writing objects: 100% (189/189), 1016.00 KiB | 997 KiB/sWriting objects: 100% (189/189), 1.12 MiB | 997 KiB/s, done.remote: error: ‘receive.denyCurrentBranch’ configuration variable to ‘refuse’.To git@101.713.4.46:channelv.git! [remote rejected] master -&gt; master (branch is currently checked out)error: failed to push some refs to ‘git@10.73.4.46:channelv.git’git did not exit cleanly (exit code 1)``` 在服务器对应的库目录下执行以下命令增加配置即可 git config --bool core.bare true]]></content>
      <tags>
        <tag>git</tag>
        <tag>Laravel</tag>
        <tag>phpstome</tag>
        <tag>oh my zsh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Laravel中的Excel]]></title>
    <url>%2F2016%2F09%2F08%2FlaravelExecl%2F</url>
    <content type="text"><![CDATA[Laravel Excel 在 Laravel 5 中集成 PHPOffice 套件中的 PHPExcel ，从而方便我们以优雅的、富有表现力的代码实现Excel/CSV文件的导入和 导出 。该项目的GitHub地址是： https://github.com/Maatwebsite/Laravel-Excel 。本文我们将在Laravel中使用Laravel Excel简单实现Excel文件的导入和导出 2、安装&amp;配置使用Composer安装依赖首先在Laravel项目根目录下使用Composer安装依赖： 1composer require maatwebsite/excel ~2.0.0 安装后的设置在 config/app.php 中注册服务提供者到 providers 数组： 1Maatwebsite\Excel\ExcelServiceProvider::class, 同样在 config/app.php 中注册门面到 aliases 数组： 1&apos;Excel&apos; =&gt; Maatwebsite\Excel\Facades\Excel::class, 如果想要对Laravel Excel进行更多的自定义配置，执行如下Artisan命令，执行成功后会在 config 目录下生成一个配置文件 excel.php 。 1php artisan vendor:publish 3、导出Excel文件为了演示Laravel Excel相关功能，我们为本测试创建一个干净的控制器 ExcelController.php ： 1php artisan make:controller ExcelController --plain 然后在 web.php 中定义相关路由： 12$router-&gt;get(&apos;excel/export&apos;,&apos;ExcelController@export&apos;);$router-&gt;get(&apos;excel/import&apos;,&apos;ExcelController@import&apos;); 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?phpnamespace App\Http\Controllers\Api;use DB;use Excel;use App\Http\Controllers\Controller;use Illuminate\Http\Request;class ExcelController extends Controller&#123; Excel文件导出功能 public function export() &#123; $info = DB::table(&apos;dtsz&apos;) -&gt;select(&apos;id&apos;, &apos;name&apos;, &apos;phone&apos;, &apos;yiyuan&apos;, &apos;dlsname&apos;, &apos;pname&apos;, &apos;addtime&apos;, &apos;logintime&apos;) -&gt;get(); $cellData = [ [&apos;共&apos;.count($info).&apos;条&apos;], [&apos; &apos;,&apos;姓名&apos;, &apos;电话&apos;, &apos;所在医院&apos;, &apos;推荐人&apos;, &apos;所在地区&apos;, &apos;注册日期&apos;, &apos;最后登录日期&apos;, &apos;总计登录天数&apos;, &apos;转诊病人数(含新转诊)&apos;, &apos;总计提现金额(含未审核)&apos;, &apos;剩余积分(含未审核)&apos;], ]; foreach ($info as $k =&gt; $v) &#123; $count = DB::table(&apos;patients&apos;)-&gt;where(&apos;uid&apos;, $v-&gt;id)-&gt;count(); $get = DB::table(&apos;jifenlog&apos;)-&gt;where(&apos;uid&apos;, $v-&gt;id)-&gt;where(&apos;sztype&apos;, 0)-&gt;select(DB::raw(&apos;SUM(jifen) as total_sales&apos;))-&gt;first(); $out = DB::table(&apos;jifenlog&apos;)-&gt;where(&apos;uid&apos;, $v-&gt;id)-&gt;where(&apos;sztype&apos;, 1)-&gt;select(DB::raw(&apos;SUM(jifen) as total_sales&apos;))-&gt;first(); $cellData[$k + 2][] = $k + 1; $cellData[$k + 2][] = $v-&gt;name ? $v-&gt;name : &apos;&apos;; $cellData[$k + 2][] = $v-&gt;phone ? $v-&gt;phone : &apos;&apos;; $cellData[$k + 2][] = $v-&gt;yiyuan ? $v-&gt;yiyuan : &apos;&apos;; $cellData[$k + 2][] = $v-&gt;dlsname ? $v-&gt;dlsname : &apos;&apos;; $cellData[$k + 2][] = $v-&gt;pname ? $v-&gt;pname : &apos;&apos;; $cellData[$k + 2][] = date(&apos;Y-m-d H:i:s&apos;, $v-&gt;addtime); $cellData[$k + 2][] = date(&apos;Y-m-d H:i:s&apos;, $v-&gt;logintime); $cellData[$k + 2][] = $v-&gt;day = 0; $cellData[$k + 2][] = $v-&gt;count_human = $count; $cellData[$k + 2][] = $v-&gt;count_sum = $get-&gt;total_sales ? $get-&gt;total_sales : 0; $cellData[$k + 2][] = $out-&gt;total_sales ? $out-&gt;total_sales : 0; &#125; Excel::create(&apos;召回用户黑名单&apos;, function ($excel) use ($cellData) &#123; $excel-&gt;sheet(&apos;score&apos;, function ($sheet) use ($cellData) &#123; $sheet-&gt;rows($cellData); &#125;); &#125;)-&gt;export(&apos;xls&apos;); &#125;&#125; 我们在浏览器中访问 http://localhost:8000/excel/export ，会导出一个名为 召回用户黑名单.xls 的Excel文件： 如果你要导出csv或者xlsx文件，只需将 export 方法中的参数改成csv或xlsx即可。如果还要将该Excel文件保存到服务器上，可以使用 store 方法： 12345Excel::create(&apos;召回用户黑名单&apos;,function($excel) use ($cellData)&#123; $excel-&gt;sheet(&apos;score&apos;, function($sheet) use ($cellData)&#123; $sheet-&gt;rows($cellData); &#125;);&#125;)-&gt;store(&apos;xls&apos;)-&gt;export(&apos;xls&apos;); 文件默认保存到 storage/exports 目录下，如果出现文件名中文乱码，将上述代码文件名做如下修改即可： 1iconv(&apos;UTF-8&apos;, &apos;GBK&apos;, &apos;召回用户黑名单&apos;) 4、导入Excel文件我们将刚才保存到服务器上的Excel文件导入进来，导入很简单，使用 Excel 门面上的 load 方法即可： 12345678Excel文件导入功能 public function import()&#123; $filePath = &apos;storage/exports/&apos;.iconv(&apos;UTF-8&apos;, &apos;GBK&apos;, &apos;召回用户黑名单&apos;).&apos;.xls&apos;; Excel::load($filePath, function($reader) &#123; $data = $reader-&gt;all(); dd($data); &#125;);&#125; load 方法基于项目根路径作为根目录，同样我们对中文进行了转码，否则会提示文件不存在。在浏览器中访问 http://localhost:8000/excel/import ，页面显示如下： 当然，Laravel Excel还有很多其它功能，比如将Blade视图导出为Excel或CSV，以及对导入/导出更加细粒度的控制，具体可参考其官方文档： http://www.maatwebsite.nl/laravel-excel/docs]]></content>
      <tags>
        <tag>Laravel</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php必须掌握的基础知识]]></title>
    <url>%2F2016%2F08%2F22%2Fphplore%2F</url>
    <content type="text"><![CDATA[php必须掌握的基础知识PHP的数据类型字符串（string） 整形（integer） 浮点型（float或者double） 布尔型（boolean） 数组（Array） 对象（Object） 资源（Resource） 字符串页面中需要显示的文字，在PHP代码中我们使用单引号或者双引号包含 作为一些技巧性的使用，如果字符串中含有单引号，那么字符串可以使用双引号包含 $var = “‘foo’”; 同理，如果字符串中含有双引号，则可以使用单引号包含 $var = ‘”bar”‘; 如果双引号包含的字符串中要显示双引号，或者单引号包含的字符串中要显示单引号，我们可以添加转义符（一个斜杠\） $var = ‘\’foo\”; $var = “\”bar\””; 单引号和双引号PHP中字符串使用单引号还是双引号并没有严格的约定 实际上，引号是可以随意使用的，只要注意不要混用，引号必须配对即可 唯一的不同就是变量的问题，双引号中可以直接将变量转换为值，而单引号不行，请问下面的代码会输出什么？ 123$name = “andy”;echo ‘my name is $name’;echo “my name is $name”; PHP初学者最容易犯的一个错误就是忘记给文字加引号 “hello” 这是字符串 $hello 这是变量 hello 系统会认为这是一个常量常见的十进制整型我们无需多说 $var = 100; // 使用var_dump输出是int(100) 另外，在PHP中，我们还可以设置其他进制的整型 运算与赋值简单的说就是我们平时常用的加减乘除运算，我们下面会重点介绍一下浮点数加减的问题，%的使用场合，以及++和—的使用 加法运算– 减法运算 乘法运算/ 除法运算% 求余运算++ 递增运算（加1）—- 递减运算（减1）3.使用number_format，我们可以将一个小数的小数点后的位数保留到指定的值 string number_format ( float $number [, int $decimals = 0 ] ) 将浮点数作为第一个参数传递，第二个参数设置小数点后保留的位数 echo number_format($x – $y, 2); // 结果为0.07取余操作%假设，我们有42篇文章，我们打算一页显示10篇，则从数学方面来分析，最后一页显示几篇文章？整数商为4 余数 = 42 – 4*10 = 2 相当于PHP的计算 42 % 10 = 2递增和递减$var–; 相当于执行 $var = $var – 1; 同理，$var++相当于执行 $var = $var + 1;单个变量直接执行递增或者递减，不论符号放在左侧还是右侧都没有差别。 $var = 10; $var–; // 或者 –$var echo $var; // 结果都是9 但是，作为PHP的一个特殊性，如果操作符在赋值语句右侧的话，需要区分前后顺序 $var = 10; $output = $var–; // 或者 $output = –$var; echo $output; // 两个结果一个是10另一个是9 $output = $var–;相当于先将$var赋值给$output再执行递减运算字符串运算符PHP的字符串运算符只有一个，就是我们常说的连字符.（一个英文的点号），使用它我们可以将几段文字连接在一起显示 $str = “i”; echo $str . “phone”; // 输出iphone echo $str . 123; // 输出i123 $str2 = “pad”; echo $str . $str2; // 输出ipad连字符的大量使用，会导致文本难以阅读，代码凌乱，推荐使用格式化输出，假设有两个变量$num和$loc，分别表示数量和地点 $num = 5; $loc = “树”; 如果直接用连字符输出下面的文字 echo $loc . “上有” . $num . “只猴子”;sprintf上面的代码很难看出来要显示的是什么文字，使用sprintf函数来代替 $format = ‘%s上有%d只猴子’; echo sprintf($format, $loc, $num);赋值运算符赋值运算实际上是将右侧表达式的值赋给左侧变量；或者说是将原表达式的值拷贝到新变量中= 赋值 右侧表达式的值赋给左侧变量+= 赋值加 左侧原变量加上右侧变量后，值赋给原变量-= 赋值减 左侧原变量减去右側变量后，值赋给原变量*= 赋值乘 左侧原变量乘以右侧变量后，值赋给原变量/= 赋值除 左侧原变量除以右侧变量后，值赋给原变量%= 赋值取余 左侧原变量与右侧变量取余，值赋给原变量.= 字符串赋值 左侧变量后连接到右侧原变量后，值赋给原变量加减乘除赋值+=、-=、*=、/=、%=、.= 上面六个运算符，看复杂，实际上只是一种 缩写 A ?= B 全部都可以理解为 A = A ? B 其中?代表任意的运算符号，因此 $foo += $bar; 相当于执行了 $foo = $foo + $bar;字符串赋值.=字符串赋值平时最常用的用法是用来连接大段的文本，看下面的例子： $html = “”; $html .= “”; $html .= “” . $title . “”; $html .= “”; $html .= “”; // …… echo $html; 当我们需要将很多段的文本片段连接到一起，又想保持代码的整洁，同时让逻辑看起来也很清晰，就可以是使用字符串赋值，实际上使用heredoc更清晰简单。比较运算符比较运算符负责条件判断、比较等操作，是程序中经常被用到的一种运算符。比较运算的结果只有两种：要么是“真”，要么是“假”。运算符 功能 说明> 大于 运算符左边表达式值大于右边表达式值时，返回true&lt; 小于 运算符左边表达式值小于右边表达式值时，返回true>= 大于等于 运算符左边表达式值大于等于右边表达式值时，返回true&lt;= 小于等于 运算符左边表达式值小于等于右边表达式值时，返回true== 相等 运算符左右两边表达式的值相等，返回true!= 不等 运算符左右两边表达式的值不相等，返回true&lt;&gt; 不等 运算符左右两边表达式的值不相等，返回true 比较运算符基本的比较运算符我们不用多介绍，下面介绍一种比较特殊的比较运算符：恒等。在判断值是否相等的前提下，还会判断类型是否一样运算符 功能 说明=== 恒等 运算符左右两边表达式的值相等并且类型一样，返回true!== 非恒等 运算符左右两边表达式的值不相等或者类型不一样，返回true在PHP中，下面所有的值都表示空：null、false、array()、””、0、”0″。 如果使用==，则 null == false、0 == “0”、null== array()、false == “”……都是返回true，而使用===则会返回false 逻辑运算符逻辑运算有点类似前面讲过的位运算的方式，但逻辑运算更侧重在程序书写和日常开发中使用，比如 if switch 语句等。PHP提供了逻辑与、或、异或、非等逻辑运算符。AND 逻辑与 当所有表达式为true时，返回true，否则返回falseOR 逻辑或 当所有表达式为false时，返回false，否则返回trueXOR 逻辑异或 只有一个表达式为true时，返回true，否则返回false&amp;&amp; 逻辑与 当所有表达式为true时，返回true，否则返回false|| 逻辑或 当所有表达式为false时，返回false，否则返回true! 逻辑非 当表达式为true时返回false，反之返回true假设： $x = 8; $y = 6; 那么： $x + $y &gt; 10; // 返回的是真 $x – $y &lt; 0; // 返回的是假 把两个比较运算放在一起进行逻辑运算的结果是什么？ $result = ($x + $y &gt; 10) &amp;&amp; ($x – $y &lt; 0); $result = ($x + $y &gt; 10) || ($x – $y &lt; 0); $result = !($x – $y &lt; 0); 条件语句简单的IF语句由两部分组成，expr是我们的表达式，而statement是我们需要执行的代码；当expr为true的时候，statement被执行；反之，则被忽略 if (expr) statement expr必须放在一对圆括号中间if ($dir == ‘west’)echo ‘西’;还是前面的代码，我么稍作修改，执行的结果应该是什么？$dir = ‘east’; if ($dir == ‘west’) {echo ‘当前方向为’;} else {echo ‘西’;}有时候我们不仅仅需要判断当expr条件为true时执行什么语句，另外，当expr条件为false时需要执行什么 if ($dir == ‘west’) { echo ‘西’; } else { echo ‘其它方向’; } 三目运算符PHP有一个特殊的运算符，我们在之前学习运算符的时候并没有介绍，在学习了if和else语句后，我们可以介绍了 ? (expr2) : (expr3)``` 当expr1条件为真时，值为expr2，否则值为expr3 下面的代码可以代替前面的```if else```语句 ```echo $dir 1多个条件组合 if ($dir == ‘west’) { echo “西”; } else { if ($dir == ‘east’) { echo “东”; } else { if ($dir == ‘north’) { echo “北”; } else { if ($dir == ‘sourth’) { echo “南”; } else { echo “未知”; } } } }``` switch语句switch 语句类似于具有同一个表达式的一系列 if 语句 每个case会依次判断，expr与expr1..n是否相等，如果相等则执行对应的statement，如果最后有break，则执行完成后跳出switch语句 default是在所有case都无法满足的情况下默认执行的操作switch (expr) { case expr1: statement; break; case expr2: statement; break; …… default: statement; } 数组数组提供了一种快速，方便地管理一组相关数据的方法，是php程序设计中的重要内容。 php中将数组分为一维数组，二维数组和多维数组，但无论是一维还是多维，可以统一将数组分为数字索引数组和关联数组两种。 索引数组这是最常见的数组类型，绝大多数编程语言都有数字索引数组 我们可以使用array()来初始化数组，每个数组元素之间使用逗号分隔 $names = array(); $names = array(‘andy’, ‘tom’, ‘jack’);第一个是一个空数组，第二个数组的元素个数是3 PHP 5.4之后，数组的初始化可以使用更简洁的方式 $names = []; $names = [‘andy’, ‘tom’, ‘jack’]; count函数我们可以使用count函数来统计数组中元素的个数 int count ( mixed $var [, int $mode = COUNT_NORMAL ] ) echo count($names); 第二跟个参数，我们会在介绍数组维度时学习 打印数组我们一般使用print_r来打印数组（当然用var_dump也可以，但是结构上不清晰） bool print_r ( mixed $expression [, bool $return ] ) 请尝试打印 print_r($names); 当第二个参数为true时，print_r不会直接打印数组，而是将打印的内容作为字符串返回 echo print_r($names, true);获取数组元素索引数组中的每个元素都有一个自增长的序号，默认情况下，0表示第一个元素，对于 $names = [‘andy’, ‘tom’, ‘jack’]; 我们可以使用数组变量名后面加方括号的方式来获取数组中的元素，譬如，用$names[0]来获取到andy，同理$names[2]代表jack 关联数组$info = [ ‘name’ =&gt; ‘andy’, ‘age’ =&gt; 18, ‘gender’ =&gt; ‘male’ ]; 关联数组使用数字下标是无法获取数据的，譬如$info[0]的值是空，我们需要使用键作为下标$info[‘age’]的值是18 数组的维度：一维$arr = [‘王刚’, ‘张丽’, ‘刘伟’]; 假设数组变量名为$arr，获取“张丽”的方式：$arr[1]多维数组超过一维的数组，我们都可以称为多维数组 我们需要明白，数组不一定就是一个下标和值的简单列表，实际上，数组中的每个元素还可以是另一个数组 因此如果一维数组中的数组元素又是一个数组，那么它就成为了二维数组 数组的维度：二维$arr = [ [‘王刚’, ‘张丽’, ‘刘伟’], [‘孙丽’, ‘李强’, ‘李国庆’], [‘赵园园’, ‘丁丽丽’] ]; echo count($arr); echo count($arr, true);$arr = [ [ [‘王刚’, ‘张丽’, ‘刘伟’], [‘孙丽’, ‘李强’, ‘李国庆’], [‘赵园园’, ‘丁丽丽’] ], [ [‘宋红’, ‘马小丽’], [‘张颖’, ‘刘军’, ‘黄涛’], [‘杜磊’, ‘朱婷婷’] ], ]; echo count($arr); echo count($arr, true); 循环在程序开发中总会有一些规律性的重复操作 我们需要让一段代码块重复的执行，譬如： 输出重复的文字（构造表格）； 对一组数据执行相同的计算（数组遍历）； 操作失败后的再次执行…… 循环都是由循环体和循环条件组成，循环体代表需要重复执行的代码快，而循环条件代表循环终止的依据 for循环for循环实际上可以看作是一个紧凑、简洁版的while循环 for (expr1; expr2; expr3) statement for循环有三个表达式 第一个表达式expr1在循环开始的时候只执行一次 第二个表达式expr2在循环体的每次循环开始的时候执行，如果执行的结果是true，循环继续进行，如果发现是false，循环结束 第三个表达式expr3在循环体的每次循环结束的时候执行 foreach循环实际上PHP还有一个特殊的循环语句，这个循环语句是专门用来遍历数组的 foreach (array_variable as val) statement array_variable代表一个数组变量，在每次循环执行时，每个元素的值会被临时赋给变量val，statement语句每次获取到的val的值都不一样，体会一下下面的代码 foreach ($arr as $item) { echo “&lt;” . $item . “&gt;”; } foreach获取下标的值foreach还有另外一种用法，定义如下 foreach (array_variable as key =&gt; val) statement key代表数组的下标，val代表数组的值，那么对于数字下标数组来说，每次循环中key的值就是从0开始子增长的数字。 那么对于关联数组呢？大家请自行尝试 break和continue如果在循环的代码块中希望停止代码的执行，我们可以使用break或者continue break 跳出循环，并且循环不再执行 continue 跳出当前循环，循环继续执行，进入下一次循环 这就跟我们下象棋一样，有些人棋品不好，眼看要输了，掀了棋盘，这就是break。 还有的人心态很好，眼看要输了，后面也甭下了，认输再来一局，这就是continue。 类的静态函数 可以不用实例化调用！]]></content>
      <tags>
        <tag>-PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo折腾日记]]></title>
    <url>%2F2016%2F08%2F13%2FhexoInstall%2F</url>
    <content type="text"><![CDATA[1.安装git和node.js 安装自行百度2.如果您的计算机已经有这些，恭喜！只要安装Hexo新公共管理 3.安装hexo1npm install -g hexo-cli 4.正式的旅程碑123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 5.如何发布GitHub上 1）在source目录学新建一个没有后缀名名为CNAME的文件，在里面写入你的域名（不带www） 2）解析你的域名到GitHub上的仓库名称xxx.github.io （自行百度） 3）修改hexo目录下站点配置文件找到deploy1234deploy: type: git repository: https://github.com/sonny/sonny.github.io.git branch: master *注意这里的repository填写你的仓库地址，这里是我的* 4）你的项目根目下运行发布命令 1hexo g -d 5）搭建 hexo，在执行 hexo deploy 后,出现 error deployer not found:git 的错误: 解决方法1. 将第3步的type值改为：type: github解决方法2。1npm install hexo-deployer-git --save 6.其余详细教程请参考https://hexo.io/docs/]]></content>
  </entry>
</search>
